name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  issues: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check Environment Variables
      run: |
        echo "Checking environment variables..."
        echo "GEMINI_API_KEY exists: ${{ secrets.GEMINI_API_KEY != '' }}"
        if [ -n "${{ secrets.GEMINI_API_KEY }}" ]; then
          echo "GEMINI_API_KEY is set (length: ${#GEMINI_API_KEY})"
        else
          echo "❌ GEMINI_API_KEY is not set!"
        fi
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        
    - name: Build
      run: npm run build
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './dist'

  test:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright Browsers
      run: |
        npx playwright install --with-deps chromium
        # Verify installation
        npx playwright --version
      
    - name: Build for testing
      run: npm run build
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        # Use a test API key for CI if main key is not available
        VITE_GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY || 'TEST_KEY_FOR_CI' }}
        
    - name: Start preview server
      run: |
        npm run preview &
        echo "Waiting for server to start..."
        sleep 30
        
        # Health check to ensure server is ready
        for i in {1..10}; do
          if curl -f http://localhost:4173 >/dev/null 2>&1; then
            echo "Server is ready!"
            break
          else
            echo "Attempt $i: Server not ready, waiting..."
            sleep 5
          fi
        done
        
    - name: Run Playwright tests
      run: npm run test
      env:
        BASE_URL: http://localhost:4173
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        CI: true
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
        
    - name: Upload test results JSON
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test-results/
        retention-days: 30
        
    - name: Evaluate test results
      if: always()
      run: |
        # テスト結果の評価スクリプト
        node -e "
        const fs = require('fs');
        const path = require('path');
        
        try {
          const resultsPath = 'test-results/results.json';
          if (!fs.existsSync(resultsPath)) {
            console.log('⚠️ Test results file not found, but proceeding with deployment');
            console.log('This may indicate tests were skipped or failed to generate results');
            return; // Exit gracefully instead of failing
          }
          
          const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
          const stats = results.stats;
          
          console.log('🧪 Test Results Summary:');
          console.log(\`Total: \${stats.total}\`);
          console.log(\`Passed: \${stats.passed}\`);
          console.log(\`Failed: \${stats.failed}\`);
          console.log(\`Skipped: \${stats.skipped}\`);
          
          // Critical テストの失敗をチェック
          const criticalTests = [
            'ページが正常に読み込まれる',
            'JavaScriptエラーが発生しない', 
            '環境変数の正しい設定確認',
            'レスポンシブデザインが機能する'
          ];
          
          const failedTests = results.suites
            .flatMap(suite => suite.specs || [])
            .filter(spec => spec.tests?.some(test => test.status === 'failed'))
            .map(spec => spec.title);
          
          const criticalFailures = failedTests.filter(test => 
            criticalTests.some(critical => test.includes(critical))
          );
          
          if (criticalFailures.length > 0) {
            console.log('❌ Critical test failures detected:');
            criticalFailures.forEach(test => console.log(\`  - \${test}\`));
            console.log('🚫 Deployment will be blocked');
            process.exit(1);
          } else if (stats.failed > 0) {
            console.log('⚠️ Some tests failed, but no critical failures');
            console.log('✅ Deployment will continue with warnings');
          } else {
            console.log('✅ All tests passed - deployment approved');
          }
        } catch (error) {
          console.log('⚠️ Error evaluating test results:', error.message);
          console.log('Stack trace:', error.stack);
          console.log('Proceeding with deployment due to evaluation error');
          // Ensure we don't fail the deployment due to evaluation issues
          process.exit(0);
        }
        "

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [build, test]
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  handle-failure:
    runs-on: ubuntu-latest
    needs: [build, test, deploy]
    if: failure()
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Create Issue on Build/Deploy Failure
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const title = `🚨 Deployment Failed - ${new Date().toISOString().split('T')[0]}`;
          
          // Get workflow run information
          const runId = context.runId;
          const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}`;
          
          // Get commit info
          const commitSha = context.sha;
          const commitUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${commitSha}`;
          
          const body = `## 🚨 デプロイメント失敗レポート

          **Workflow Run**: [#${runId}](${runUrl})
          **Commit**: [${commitSha.substring(0, 7)}](${commitUrl})
          **Branch**: ${context.ref}
          **Actor**: @${context.actor}
          **Triggered**: ${context.eventName}

          ## 📊 失敗ジョブ情報
          
          このIssueは自動的に作成されました。失敗の詳細については上記のWorkflow Runリンクを確認してください。
          
          ## 🤖 自動修正予定
          
          Claude Codeが以下の手順で自動修正を試行します：
          
          1. ✅ エラーログの分析
          2. ✅ 原因の特定（ビルドエラー、環境変数、依存関係など）
          3. ✅ 修正案の生成・実装
          4. ✅ 自動commit & 再デプロイ
          
          ## 📋 チェックリスト
          
          - [ ] エラーログ確認
          - [ ] 環境変数設定確認
          - [ ] 依存関係チェック
          - [ ] TypeScriptエラー修正
          - [ ] 修正完了・再デプロイ
          
          ---
          
          **自動生成時刻**: ${new Date().toLocaleString('ja-JP', { timeZone: 'Asia/Tokyo' })}`;

          // Check if similar issue already exists (within last 24 hours)
          const yesterday = new Date();
          yesterday.setDate(yesterday.getDate() - 1);
          
          const existingIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'deployment-failure,auto-created',
            since: yesterday.toISOString()
          });
          
          if (existingIssues.data.length === 0) {
            // Create new issue
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['deployment-failure', 'auto-created', 'bug', 'priority:high']
            });
            
            console.log(`Created issue #${issue.data.number}: ${issue.data.html_url}`);
          } else {
            console.log(`Similar issue already exists: #${existingIssues.data[0].number}`);
            
            // Update existing issue with new failure info
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssues.data[0].number,
              body: `## 🔄 追加失敗発生
              
              **新しい失敗**: [Workflow Run #${runId}](${runUrl})
              **Commit**: [${commitSha.substring(0, 7)}](${commitUrl})
              **時刻**: ${new Date().toLocaleString('ja-JP', { timeZone: 'Asia/Tokyo' })}`
            });
          }

    - name: Send Discord Notification (Optional)
      if: env.DISCORD_WEBHOOK_URL != ''
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        if [ -n "$DISCORD_WEBHOOK_URL" ]; then
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "embeds": [{
                   "title": "🚨 デプロイメント失敗",
                   "description": "岩手イベントナビゲーターのデプロイが失敗しました",
                   "color": 15548997,
                   "fields": [
                     {"name": "Repository", "value": "'${{ github.repository }}'", "inline": true},
                     {"name": "Branch", "value": "'${{ github.ref_name }}'", "inline": true},
                     {"name": "Commit", "value": "['${{ github.sha }}']('${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}')", "inline": true},
                     {"name": "Workflow", "value": "['${{ github.run_id }}']('${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}')", "inline": false}
                   ],
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                 }]
               }' \
               "$DISCORD_WEBHOOK_URL"
          echo "Discord notification sent"
        else
          echo "Discord webhook URL not configured - skipping notification"
        fi